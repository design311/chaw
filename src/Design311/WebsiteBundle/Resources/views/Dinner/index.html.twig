{% extends 'Design311WebsiteBundle::layout.html.twig' %}

{% block title %}Social Dinners, leer nieuwe mensen en gerechten kennen{% endblock %}
{% block description %}Social dining is een nieuwe vorm van netwerken, je leert mensen kennen terwijl je samen eet, niet op restaurant maar wel bij de gastheer/vrouw thuis{% endblock %}

{% block bodyclass %}mapheader dinnerindex{% endblock %}

{% block content %}

<div class="mapcontainer">
	<div id="map" class="map"></div>
	<div class="resize">Kaart vergroten</div>
</div>

<div class="content">
	<div class="container">
		<div class="one-third sidebar">
			<div class="widget">
				<div class="locationfilter"><label for="locatie"><strong>Locatie</strong></label><br>
				<input type="text" id="locatie"> <br>
				<span class="inputinfo">Gebruik de kaart om uw resultaten te filteren</span></div>
			</div>
			<div id="calendar" class="calendar widget">
				<table>
					<thead>
						<tr>
							<th><a href="#" id="prev_month" style="display:none;">&laquo;</a></th>
							<th colspan="5"><span id="current_month"></span> <span id="current_year"></span></th>
							<th><a href="#" id="next_month">&raquo;</a></th>
						</tr>
						<tr>
							<th>Ma</th>
							<th>Di</th>
							<th>Wo</th>
							<th>Do</th>
							<th>Vr</th>
							<th>Za</th>
							<th>Zo</th>
						</tr>
					</thead>
					<tbody>
					</tbody>
				</table>
				<div><br>Toon dinners vanaf <strong id="startdatetext">{{"now"|date("d-m-Y")}}</strong><br>
				Tot en met <strong id="enddatetext">...</strong><br>
				<a href="#" id="resetdates">Reset</a></div>
				<input type="hidden" id="startdate"><input type="hidden" id="enddate">
			</div>
			<div id="filters">
				<div class="widget">
					<p>
						<label>Maximumprijs:</label> â‚¬<span class="amount"></span>
						<input type="hidden" class="amount" id="maxprice">
					</p>
					<div id="slider-range"></div>
				</div>
				
				<div class="widget checkboxes">
					<p><label for="diet">Eetgewoonte</label></p>
					<select name="diet" id="diet">
						<option value="0">Geen voorkeur</option>
						{% for diet in diets %}
							<option value="{{diet.id}}">{{diet.value}}</option>
						{% endfor %}
					</select>
				</div>
				
				{% for filter in filters %}
					<div class="widget checkboxes">
						<p><strong>{{filter.name}}</strong></p>
						{% for child in filter.children %}
								<p><input type="checkbox" name="{{filter.name|lower}}" value="{{child.value|lower}}" id="{{child.value|lower}}"> <label for="{{child.value|lower}}">{{child.value}}</label></p>
						{% endfor %}
					</div>
				{% endfor %}
			</div>
		</div>
		<div class="two-third">
			<h1 class="averia fl dinners-title">Social Dinners</h1>
			<p class="adddinner fr"><a href="{{ path('design311website_dinners_add') }}" class="button button-orange"><i class="sprite plus white"></i>Dinner toevoegen</a></p>
			<div class="clear"></div>
			<img src="{{ asset('bundles/design311website/img/loader.gif') }}" alt="Loading..." width="16" height="16" id="loading">
			<table id="dinners" class="dinners">
				<thead>
					<tr>
						<th data-property="date"><i class="sprite small sort-asc"></i>Datum</th>
						<th data-property="title"><i class="sprite small sort"></i>Titel</th>
						<th data-property="price"><i class="sprite small sort"></i>Prijs</th>
						<th data-property="diet"><i class="sprite small sort"></i>Eetgewoonte</th>
						<th data-property="distance"><i class="sprite small sort"></i>Afstand</th>
					</tr>
				</thead>
				<tbody>
				</tbody>
			</table>
			<p id="nonefound">Sorry! Geen dinners gevonden.</p>
		</div>
	</div>
</div>
{% endblock %}

{% block head %} 	
	<link rel="stylesheet" href="{{ asset('bundles/design311website/js/jquery-ui/jquery-ui-1.10.4.slider.min.css') }}">
{% endblock %}

{% block footer %}
	<script src="http://maps.google.com/maps/api/js?sensor=false"></script>
	<script src="{{ asset('bundles/design311website/js/maps.markerclusterer.js') }}"></script>
	<script src="{{ asset('bundles/design311website/js/jquery-ui/jquery-ui-1.10.4.slider.min.js') }}"></script>
	<script type="text/javascript">

		$(function(){
			var dinnersTable = $('#dinners').hide();
			var nonefound = $('#nonefound').hide();
			var tbody = $('#dinners tbody');
			var dinners = $.parseJSON('{{dinners|raw}}');
			var visibleDinners = [];
			var detail = '{{ path('design311website_dinners_detail', {'permalink': 'permalink_holder'}) }}';
			//var eventDates = [];
			var months = ['Januari', 'Februari', 'Maart', 'April', 'Mei', 'Juni', 'Juli', 'Augustus', 'September', 'Oktober', 'November', 'December'];
			var startdate = $('#startdate');
			var enddate = $('#enddate');

			var currentSort = 'date';
			var reverseSort = false;

			var currentPosition;
			var currentLocation;

			var map;
			var markers = [];
			var markerCluster;
			var geocoder = new google.maps.Geocoder();
			var infowindow = new google.maps.InfoWindow();

			var mapStyle = [
				{
					"stylers": [
						{ "hue": "#ff9100" }
					]
				},{
					"featureType": "poi",
					"stylers": [
						{ "visibility": "off" }
					]
				},{
					"featureType": "road",
					"elementType": "labels.icon",
					"stylers": [
						{ "visibility": "off" }
					]
				},{
					"featureType": "transit",
					"elementType": "labels",
					"stylers": [
						{ "visibility": "off" }
					]
				},{
					"featureType": "water",
					"stylers": [
						{ "visibility": "simplified" }
					]
				},{
					"featureType": "administrative.neighborhood",
					"stylers": [
						{ "visibility": "off" }
					]
				}
			]

			map = new google.maps.Map(document.getElementById('map'), {
				mapTypeId: google.maps.MapTypeId.ROADMAP,
				streetViewControl: false,
				mapTypeControl: false,
				scrollwheel: false,
				styles:mapStyle
			});
			
			var latlngbounds = new google.maps.LatLngBounds();

			updateMarkers(dinners);

			map.setCenter(latlngbounds.getCenter());
			map.fitBounds(latlngbounds);

			if(navigator.geolocation) {
				navigator.geolocation.getCurrentPosition(function(position) {
					currentPosition = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
					geocoder.geocode({'latLng': currentPosition}, function(results, status) {
						if (status == google.maps.GeocoderStatus.OK) {
							if (results[1]) {
								currentLocation = results[1].formatted_address;
								$('#locatie').val(results[1].formatted_address);
							}
						}
					});
					centerLocation(currentPosition);
				});
			}

			function centerLocation(coords){
				var radius = 2500; //meter
				var circle = new google.maps.Circle({
					center: coords,
					radius: radius
				});
				
				map.fitBounds(circle.getBounds());
				map.setCenter(coords);
			}

			//idle fires once instead of bounds_changed firing all the time
			google.maps.event.addListener(map, 'idle', function() {
					updateDinners();
					//updateCalendarEvents();
			});

			function updateMarkers(dinners){

				if (typeof markerCluster == 'object') {
					markerCluster.clearMarkers();
				};
				markers = [];

				$.each(dinners, function(i, dinner){

					var coords = new google.maps.LatLng(dinner.lat, dinner.lng);

					var dinnerDate = new Date((dinner.date).slice(0,19)); //slice for IE fix
					var d = dinnerDate.getDate();
					var m =  dinnerDate.getMonth();
					m += 1;  // JavaScript months are 0-11
					var y = dinnerDate.getFullYear();

					var detailLink = detail.replace('permalink_holder', dinner.permalink);

					var content = '\
						<div class="dinnerinfo"> \
							<h2><a href="'+detailLink+'">'+dinner.title+'</a></h2> \
							<ul class="dinnermeta"> \
								<li>'+d+'-'+m+'-'+y+'</li> \
								<li>&euro;'+dinner.price+'</li> \
							</ul> \
							<p>Eetgewoonte: '+dinner.diet+'</p> \
						</div> \
					';


					$.each(markers, function(index, marker) {
						var pos = marker.getPosition();
						if (coords.equals(pos)) {
							content = marker.info + content;
							return false; //exit each
						}
					});
					
					var marker = new google.maps.Marker({
						map: map,
						position: coords,
						icon: "{{ asset('bundles/design311website/img/marker.png')}}",
						dinnerId: dinner.id,
						info: content
					});

					google.maps.event.addListener(marker, 'click', function(){
						markerClicked(marker)
					});

					markers.push(marker);
					latlngbounds.extend(coords);
				})

				markerCluster = new MarkerClusterer(map, markers, {
					gridSize: 30,
					maxZoom: 12
				});
			}

			function markerClicked(marker){
				infowindow.close();
				infowindow = new google.maps.InfoWindow({
					content: marker.info
				});
				infowindow.open(map,marker);

				/*var dinner = '#dinner-'+id;
				$('html,body').animate({
					scrollTop: $(dinner).offset().top
				}, 500);
				$(dinner).addClass('focus');

				setTimeout(function(){
					$(dinner).css('backgroundColor','#fff');
				}, 1500)

				setTimeout(function(){
					$(dinner).removeAttr('style');
					$(dinner).removeClass('focus');
				},2500);*/
			}

			function updateDinners(){
				tbody.empty();

				var bounds = map.getBounds();
				visibleDinners = [];
				//eventDates = [];
				for (var i=0; i<markers.length; i++){
					if( bounds.contains(markers[i].getPosition()) ){
						$.each(dinners, function(index, dinner) {
							if (dinner.id == markers[i].dinnerId) {
								visibleDinners.push(dinner);
								//eventDates.push(dinner.date);
								return false; //exit $.each loop
							}
						});
					}
				}

				visibleDinners = sortDinners(visibleDinners);
				visibleDinners = filterDinnersByDate(visibleDinners);

				if (visibleDinners.length !== 0) {
					dinnersTable.show();
					nonefound.hide();

					$.each(visibleDinners, function(i, dinner){
						if (typeof currentPosition != 'undefined') {
							dinner.distance = getDistance(currentPosition.lat(), currentPosition.lng(), dinner.lat, dinner.lng);
						}
					})

					$.each(visibleDinners, function(i, dinner){

						var dinnerDate = new Date((dinner.date).slice(0,19)); //slice for IE fix
						var d = dinnerDate.getDate();
						var m =  dinnerDate.getMonth();
						m += 1;  // JavaScript months are 0-11
						var y = dinnerDate.getFullYear();

						var detailLink = detail.replace('permalink_holder', dinner.permalink);
						var distance = (dinner.distance) ? '<span class="tooltip" title="Afstand vanaf '+currentLocation+'">'+Math.round(dinner.distance*100)/100 + ' km</span>' : '<i title="Geef eerst je locatie op" class="sprite question tooltip"></i>';
						tbody.append(' \
							<tr id="dinner-'+dinner.id+'"> \
								<td class="date-col">'+d+'-'+m+'-'+y+'</td> \
								<td class="title-col"><a href="'+detailLink+'">'+dinner.title+'</a></td> \
								<td class="price-col">â‚¬ '+dinner.price+'</td> \
								<td class="diet-col">'+dinner.diet+'</td> \
								<td class="distance-col">'+ distance +'	</td> \
							</tr>');
					})
				}
				else{
					dinnersTable.hide();
					nonefound.show();
				}
				$('#loading').hide();
			}

			Number.prototype.toRad = function() {
				return this * Math.PI / 180;
			}

			function getDistance(lat1, lng1, lat2, lng2){
				var R = 6371; // km
				var x1 = lat2-lat1;
				var dLat = x1.toRad();  
				var x2 = lng2-lng1;
				var dlng = x2.toRad();  
				var a = Math.sin(dLat/2) * Math.sin(dLat/2) + 
						Math.cos(lat1.toRad()) * Math.cos(lat2.toRad()) * 
						Math.sin(dlng/2) * Math.sin(dlng/2);  
				var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
				var d = R * c;

				return d;
			}

			$('#locatie').blur(function(){
				var address = $(this).val();
				geocoder.geocode( { 'address': address}, function(results, status) {
					if (status == google.maps.GeocoderStatus.OK) {
						currentLocation = address;
						currentPosition = results[0].geometry.location;
						centerLocation(currentPosition);
					}
				});
			})

			$('#locatie').keypress(function(e) {
				if (e.keyCode == 13) {
					$('#locatie').blur();
				}
			});

			$('#filters input, #filters select').change(function(){
				var filters = {};
				$.each($('#filters input'), function(index, input) {
					if ($(input).is(':checkbox')) {
						if (input.checked) {
							if (typeof filters[input.name] == 'undefined') {
								filters[input.name] = [];
							}
							filters[input.name].push(input.value);
						};
					}
					else{
						filters[input.id] = input.value;
					}
				});
				$.each($('#filters select'), function(index, input) {
					filters[input.id] = input.value;
				});

				$.ajax({
					url: "{{path('design311website_dinners_filter')}}",
					type: "POST",
					data: filters,
					dataType: "JSON",
					success: function (data) {
						dinners = data;
						updateMarkers(data);
						updateDinners();
					}
				});
			})


			var now = new Date();
			var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
			var firstOfMonth, lastOfMonth;
			var currentMonth = new Date(today);
			updateCalendar(currentMonth);

			/*function updateCalendarEvents(){
				$('#calendar td.event').removeClass('event');
				$.each(eventDates, function(i, event) {
					event = new Date(event);
					if (event.getMonth() == currentMonth.getMonth()) {
						$('#day-'+event.getDate()).addClass('event');
					};
				});
			}*/

			function updateCalendar(currentMonth){
				$('#current_month').text(months[currentMonth.getMonth()]);
				$('#current_year').text(currentMonth.getFullYear());
				$('#calendar tbody').empty();

				firstOfMonth = new Date(currentMonth);
				firstOfMonth.setDate(1);
				lastOfMonth = new Date(currentMonth);
				lastOfMonth.setMonth(currentMonth.getMonth()+1);
				lastOfMonth.setDate(0);

				var table = '<tr>'
				var emptyCell = '<td class="empty">&nbsp;</td>';

				if (firstOfMonth.getDay() == 0) {
					var counter = 7; //zondag
				}
				else{
					var counter = firstOfMonth.getDay();
				}

				for (var i = 1; i < counter; i++) {
					table += emptyCell;
				};

				for (var i = 1; i <= lastOfMonth.getDate(); i++) {
					var date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);

					if (date.toString() == today.toString()) {
						table += '<td class="today tooltip" title="Vandaag" id="day-'+i+'">'+i+'</td>';
					}
					else{
						if (date > today) {
							table += '<td id="day-'+i+'">'+i+'</td>';
						}
						else{
							table += '<td id="day-'+i+'" class="disabled">'+i+'</td>';
						}
					}

					if (counter == 7 && i != lastOfMonth.getDate()) {
						table += '</tr><tr>';
						counter = 0;
					};
					counter++;
				};

				for (var i = counter; i <= 7; i++) {
					table += emptyCell;
				};

				table += '</tr>';

				$('#calendar tbody').append(table);
				//updateCalendarEvents();
			}


			Date.prototype.toDateInputValue = (function() {
				var local = new Date(this);
				local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
				return local.toJSON().slice(0,10);
			});

			var dateClickedCounter = 0;

			$('#calendar tbody').on('click', 'td', function(){
				var clickedDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), $(this).text());

				if (clickedDate > today || clickedDate.toString() == today.toString()) {

					if (dateClickedCounter == 0) {
						startdate.val(clickedDate.toDateInputValue());
						enddate.val(clickedDate.toDateInputValue()).change();
						dateClickedCounter++;
					}
					else{
						if (clickedDate >= new Date(startdate.val()) ) {
							enddate.val(clickedDate.toDateInputValue()).change();
						}
						else{
							enddate.val(startdate.val());
							startdate.val(clickedDate.toDateInputValue()).change();
						}
						dateClickedCounter = 0;
					}

					var filteredDinners = filterDinnersByDate(dinners);

					updateMarkers(filteredDinners);
					updateDinners();
					//updateCalendarEvents();
					updateHighlight();

				}

				return false;
			})

			function filterDinnersByDate(dinners){
				var filteredDinners = [];
				$.each(dinners, function(i, dinner){
						var dinnerDate = new Date(dinner.date);
						var startval = startdate.val();
						var endval = enddate.val();
						var start = new Date(startval);
						var end = new Date(endval);

						start.setHours(0,0,0,0);
						end.setHours(0,0,0,0);
						dinnerDate.setHours(0,0,0,0);

						if ( (dinnerDate >= start && dinnerDate <= end)
							|| (dinnerDate >= start && endval == '')
							|| (startval == '' && dinnerDate <= end)
							|| (startval == '' && endval == '')
							) {
							filteredDinners.push(dinner);
						}
				});

				return filteredDinners;
			}

			function updateHighlight(){
				var start = new Date(startdate.val());
				var end = new Date(enddate.val());

				$('#calendar tbody td.highlight').removeClass('highlight');

				if (enddate.val() != '') {

					//both in this month
					if (start.getMonth() == currentMonth.getMonth() && end.getMonth() == currentMonth.getMonth()) {
						for (var i = start.getDate(); i <= end.getDate(); i++) {
							$('#calendar tbody td#day-'+i).addClass('highlight');
						};
						return;
					}

					//start this month
					if (start.getMonth() == currentMonth.getMonth()) {
						for (var i = start.getDate(); i <= lastOfMonth.getDate(); i++) {
							$('#calendar tbody td#day-'+i).addClass('highlight');
						};
						return;
					}

					//end this month
					if (end.getMonth() == currentMonth.getMonth()) {
						for (var i = firstOfMonth.getDate(); i <= end.getDate(); i++) {
							$('#calendar tbody td#day-'+i).addClass('highlight');
						};
						return;
					}

					if (start.getMonth() < currentMonth.getMonth() && end.getMonth() > currentMonth.getMonth()) {
						$('#calendar tbody td').addClass('highlight');
						return;
					}

				}

			}

			$('#prev_month').click(function(){
				if (currentMonth.getMonth()-1 == today.getMonth()) {
					$(this).hide();
				}
				currentMonth.setMonth(currentMonth.getMonth()-1);
				updateCalendar(currentMonth);
				updateHighlight();
				return false;
			})

			$('#next_month').click(function(){
				$('#prev_month').show();
				currentMonth.setMonth(currentMonth.getMonth()+1);
				updateCalendar(currentMonth);
				updateHighlight();
				return false;
			})

			$('#calendar input').change(function(){
				var start = new Date(startdate.val());
				var end = new Date(enddate.val());
				$('#startdatetext').text(start.getDate()+'-'+ (start.getMonth()+1) +'-'+start.getFullYear());
				$('#enddatetext').text(end.getDate()+'-'+ (end.getMonth()+1) +'-'+end.getFullYear());
			})

			$('#resetdates').click(function(){
				startdate.val(today.toDateInputValue());
				enddate.val('');
				$('#startdatetext').text(today.getDate()+'-'+ (today.getMonth()+1) +'-'+today.getFullYear());
				$('#enddatetext').text('...');
				updateHighlight();
				updateMarkers(dinners);
				updateDinners();
				return false;
			});

			$(dinnersTable).find('th').click(function(){
				if (currentSort == $(this).data('property')) {
					reverseSort = !reverseSort;
				}
				else{
					reverseSort = false;
				}
				currentSort = $(this).data('property');
				$(dinnersTable).find('th i').removeClass('sort-asc sort-desc').addClass('sort');
				if (reverseSort) {
					$(this).children('i').removeClass('sort').addClass('sort-desc');
				}
				else{
					$(this).children('i').removeClass('sort').addClass('sort-asc');
				}
				updateDinners();
			})

			function sortDinners(dinners){
				var sorted = [];
				$.each(dinners, function(index, dinner) {
					sorted[index] = dinner;
				});

				sorted.sort(function(a, b){
					if (currentSort == 'date') {
						return new Date(a.date) - new Date(b.date);
					}
					else if (currentSort == 'price' || currentSort == 'distance') {
						return parseFloat(a[currentSort]) - parseFloat(b[currentSort])
					}
					else{
						return a[currentSort].localeCompare(b[currentSort]);
					}
				})

				if (reverseSort) {
					sorted.reverse();
				}

				return sorted;
			}
		});
	</script>
{% endblock %}