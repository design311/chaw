{% extends 'Design311WebsiteBundle::layout.html.twig' %}

{% block content %}

<div id="map" class="map"></div>

<div class="content">
	<div class="container">
		<div class="one-third filters">
		<p><a href="{{ path('design311website_dinners_add') }}" class="button button-orange adddinner"><i class="sprite plus white"></i>Dinner toevoegen</a></p>
			<h3>Filter de zoekresultaten</h3>
			<p><label for="locatie"><strong>Locatie</strong></label></p>
			<p><input type="text" id="locatie"></p>
			<p>TIP: Versleep de kaart om te filteren</p>
			<div id="calendar" class="calendar">
				<table>
					<thead>
						<tr>
							<th><a href="#" id="prev_month">&laquo;</a></th>
							<th colspan="5"><span id="current_month"></span> <span id="current_year"></span></th>
							<th><a href="#" id="next_month">&raquo;</a></th>
						</tr>
						<tr>
							<th>Ma</th>
							<th>Di</th>
							<th>Wo</th>
							<th>Do</th>
							<th>Vr</th>
							<th>Za</th>
							<th>Zo</th>
						</tr>
					</thead>
					<tbody>
					</tbody>
				</table>
				<p>Dinners vanaf <strong id="startdatetext">{{"now"|date("d-m-Y")}}</strong> tot en met <strong id="enddatetext">...</strong></p>
				<input type="hidden" id="startdate"><input type="hidden" id="enddate">
			</div>
			<div id="filters">
				<p>
					<label for="amount">Maximumprijs:</label> €<span class="amount"></span>
					<input type="hidden" class="amount" id="maxprice">
				</p>
				<div id="slider-range"></div>
				
				<p><strong>Eetgewoonte</strong></p>
				{% for diet in diets %}
					<p><input type="checkbox" name="diet" value="{{diet.id}}" id="{{diet.value|lower}}"> <label for="{{diet.value|lower}}">{{diet.value}}</label></p>
				{% endfor %}
				
				{% for filter in filters %}
					<p><strong>{{filter.name}}</strong></p>
					{% for child in filter.children %}
							<p><input type="checkbox" name="{{filter.name|lower}}" value="{{child.value|lower}}" id="{{child.value|lower}}"> <label for="{{child.value|lower}}">{{child.value}}</label></p>
					{% endfor %}
				{% endfor %}
			</div>
		</div>
		<div class="two-third">
			<img src="{{ asset('bundles/design311website/img/loader.gif') }}" alt="Loading..." width="16" height="16" id="loading">
			<table id="dinners" class="dinners">
				<thead>
					<tr>
						<th data-property="date">Datum</th>
						<th data-property="title">Titel</th>
						<th data-property="price">Prijs</th>
						<th data-property="city">Plaats</th>
						<th data-property="distance">Afstand</th>
					</tr>
				</thead>
				<tbody>
				</tbody>
			</table>
			<p id="nonefound">Sorry! Geen dinners gevonden.</p>
		</div>
	</div>
</div>
{% endblock %}

{% block footer %}
	<script src="http://maps.google.com/maps/api/js?sensor=false"></script>
	<script src="{{ asset('bundles/design311website/js/maps.markerclusterer.js') }}"></script>
	<script src="{{ asset('bundles/design311website/js/jquery-ui/jquery-ui-1.10.4.slider.min.js') }}"></script>
	<link rel="stylesheet" href="{{ asset('bundles/design311website/js/jquery-ui/jquery-ui-1.10.4.slider.min.css') }}">
	<script type="text/javascript">

		$(function(){
			var dinnersTable = $('#dinners').hide();
			var nonefound = $('#nonefound').hide();
			var tbody = $('#dinners tbody');
			var dinners = $.parseJSON('{{dinners|raw}}');
			var visibleDinners = [];
			var eventDates = [];
			var months = ['Januari', 'Februari', 'Maart', 'April', 'Mei', 'Juni', 'Juli', 'Augustus', 'September', 'Oktober', 'November', 'December'];
			var startdate = $('#startdate');
			var enddate = $('#enddate');

			var currentSort = 'date';
			var reverseSort = false;

			var currentLocation;

			var map;
			var markers = [];
			var markerCluster;
			var geocoder = new google.maps.Geocoder();

			map = new google.maps.Map(document.getElementById('map'), {
				mapTypeId: google.maps.MapTypeId.ROADMAP,
				streetViewControl: false,
				mapTypeControl: false,
				scrollwheel: false
			});
			
			var latlngbounds = new google.maps.LatLngBounds();

			updateMarkers(dinners);

			map.setCenter(latlngbounds.getCenter());
			map.fitBounds(latlngbounds);

			if(navigator.geolocation) {
				navigator.geolocation.getCurrentPosition(function(position) {
					currentLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
					centerLocation(currentLocation);
				});
			}

			function centerLocation(coords){
				var radius = 2500; //meter
				var circle = new google.maps.Circle({
					center: coords,
					radius: radius
				});
				
				map.fitBounds(circle.getBounds());
				map.setCenter(coords);
			}

			//idle fires once instead of bounds_changed firing all the time
			google.maps.event.addListener(map, 'idle', function() {
					updateDinners();
					updateCalendarEvents();
			});

			function updateMarkers(dinners){

				if (typeof markerCluster == 'object') {
					markerCluster.clearMarkers();
				};
				markers = [];

				$.each(dinners, function(i, item){

					var coords = new google.maps.LatLng(item.lat, item.lng);
					
					var marker = new google.maps.Marker({
						map: map,
						position: coords,
						icon: "{{ asset('bundles/design311website/img/marker.png')}}",
						dinnerId: item.id
					});
					markers.push(marker);
					latlngbounds.extend(coords);
				})

				markerCluster = new MarkerClusterer(map, markers, {
					gridSize: 30
				});
			}

			function updateDinners(){
				tbody.empty();

				var bounds = map.getBounds();
				visibleDinners = [];
				eventDates = [];
				for (var i=0; i<markers.length; i++){
					if( bounds.contains(markers[i].getPosition()) ){
						$.each(dinners, function(index, dinner) {
							if (dinner.id == markers[i].dinnerId) {
								visibleDinners.push(dinner);
								eventDates.push(dinner.date);
								return false; //exit $.each loop
							}
						});
					}
				}

				if (visibleDinners.length !== 0) {
					dinnersTable.show();
					nonefound.hide();

					visibleDinners = sortDinners(visibleDinners);

					var detail = '{{ path('design311website_dinners_detail', {'permalink': 'permalink_holder'}) }}';
					$.each(visibleDinners, function(i, dinner){

						if (typeof dinner.distance == 'undefined' && typeof currentLocation != 'undefined') {
							dinner.distance = getDistance(currentLocation.lat(), currentLocation.lng(), dinner.lat, dinner.lng);
						}

						var dinnerDate = new Date(dinner.date);
						var d = dinnerDate.getDate();
						var m =  dinnerDate.getMonth();
						m += 1;  // JavaScript months are 0-11
						var y = dinnerDate.getFullYear();

						var detailLink = detail.replace('permalink_holder', dinner.permalink);
						var distance = (dinner.distance) ? Math.round(dinner.distance*100)/100 : '<span title="Geef eerst je locatie op">-</span>';
						tbody.append(' \
							<tr> \
								<td>'+d+'-'+m+'-'+y+'</td> \
								<td><a href="'+detailLink+'">'+dinner.title+'</a></td> \
								<td>'+dinner.city+'</td> \
								<td>€ '+dinner.price+'</td> \
								<td>'+ distance +' km</td> \
							</tr>');
					})
				}
				else{
					dinnersTable.hide();
					nonefound.show();
				}
				$('#loading').hide();
			}

			Number.prototype.toRad = function() {
				return this * Math.PI / 180;
			}

			function getDistance(lat1, lng1, lat2, lng2){
				var R = 6371; // km
				var x1 = lat2-lat1;
				var dLat = x1.toRad();  
				var x2 = lng2-lng1;
				var dlng = x2.toRad();  
				var a = Math.sin(dLat/2) * Math.sin(dLat/2) + 
						Math.cos(lat1.toRad()) * Math.cos(lat2.toRad()) * 
						Math.sin(dlng/2) * Math.sin(dlng/2);  
				var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
				var d = R * c;

				return d;
			}

			$('#locatie').blur(function(){
				if ($(this).val()) {};

				var address = $(this).val();
				geocoder.geocode( { 'address': address}, function(results, status) {
					if (status == google.maps.GeocoderStatus.OK) {

						currentLocation = results[0].geometry.location;
						centerLocation(currentLocation);
					}
					else {
						//TODO proper error message
						alert('Geocode was not successful for the following reason: ' + status);
					}
				});
			})

			$('#filters input').change(function(){
				var filters = {};
				$.each($('#filters input'), function(index, input) {
					if ($(input).is(':checkbox')) {
						if (input.checked) {
							if (typeof filters[input.name] == 'undefined') {
								filters[input.name] = [];
							}
							filters[input.name].push(input.value);
						};
					}
					else{
						filters[input.id] = input.value;
					}
				});

				$.ajax({
					url: "{{path('design311website_dinners_filter')}}",
					type: "POST",
					data: filters,
					dataType: "JSON",
					success: function (data) {
						dinners = data;
						updateMarkers(data);
						updateDinners();
					}
				});
			})


			var now = new Date();
			var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
			var firstOfMonth, lastOfMonth;
			var currentMonth = new Date(today);
			updateCalendar(currentMonth);

			function updateCalendarEvents(){
				$('#calendar td.event').removeClass('event');
				$.each(eventDates, function(i, event) {
					event = new Date(event);
					if (event.getMonth() == currentMonth.getMonth()) {
						$('#day-'+event.getDate()).addClass('event');
					};
				});
			}

			function updateCalendar(currentMonth){
				$('#current_month').text(months[currentMonth.getMonth()]);
				$('#current_year').text(currentMonth.getFullYear());
				$('#calendar tbody').empty();

				firstOfMonth = new Date(currentMonth);
				firstOfMonth.setDate(1);
				lastOfMonth = new Date(currentMonth);
				lastOfMonth.setMonth(currentMonth.getMonth()+1);
				lastOfMonth.setDate(0);

				var table = '<tr>'
				var emptyCell = '<td class="empty">&nbsp;</td>';

				if (firstOfMonth.getDay() == 0) {
					var counter = 7; //zondag
				}
				else{
					var counter = firstOfMonth.getDay();
				}

				for (var i = 1; i < counter; i++) {
					table += emptyCell;
				};

				for (var i = 1; i <= lastOfMonth.getDate(); i++) {
					var date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), i);

					if (date.toString() == today.toString()) {
						table += '<td class="today" id="day-'+i+'">'+i+'</td>';
					}
					else{
						table += '<td id="day-'+i+'">'+i+'</td>';
					}

					if (counter == 7 && i != lastOfMonth.getDate()) {
						table += '</tr><tr>';
						counter = 0;
					};
					counter++;
				};

				for (var i = counter; i <= 7; i++) {
					table += emptyCell;
				};

				table += '</tr>';

				$('#calendar tbody').append(table);
				updateCalendarEvents();
			}


			Date.prototype.toDateInputValue = (function() {
				var local = new Date(this);
				local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
				return local.toJSON().slice(0,10);
			});

			var dateClickedCounter = 0;

			$('#calendar tbody').on('click', 'td', function(){
				var clickedDate = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), $(this).text());
				if (dateClickedCounter == 0) {
					startdate.val(clickedDate.toDateInputValue());
					enddate.val(clickedDate.toDateInputValue()).change();
					dateClickedCounter++;
				}
				else{
					if (clickedDate >= new Date(startdate.val()) ) {
						enddate.val(clickedDate.toDateInputValue()).change();
					}
					else{
						enddate.val(startdate.val());
						startdate.val(clickedDate.toDateInputValue()).change();
					}
					dateClickedCounter = 0;
				}

				if (dateClickedCounter == 0) {
					filteredDinners = {};
					$.each(dinners, function(i, dinner){
							var dinnerDate = new Date(dinner.date);
							var startval = startdate.val();
							var endval = enddate.val();
							var start = new Date(startval);
							var end = new Date(endval);

							start.setHours(0,0,0,0);
							end.setHours(0,0,0,0);
							dinnerDate.setHours(0,0,0,0);

							if ( (dinnerDate >= start && dinnerDate <= end)
								|| (dinnerDate >= start && endval == '')
								|| (startval == '' && dinnerDate <= end)
								|| (startval == '' && endval == '')
								) {
								filteredDinners[i] = dinner;
							}
					});

					updateMarkers(filteredDinners);
					updateDinners();
					updateCalendarEvents();
				}
				updateHighlight();

				return false;
			})

			function updateHighlight(){
				var start = new Date(startdate.val());
				var end = new Date(enddate.val());

				$('#calendar tbody td.highlight').removeClass('highlight');

				//both in this month
				if (start.getMonth() == currentMonth.getMonth() && end.getMonth() == currentMonth.getMonth()) {
					for (var i = start.getDate(); i <= end.getDate(); i++) {
						$('#calendar tbody td#day-'+i).addClass('highlight');
					};
					return;
				}

				//start this month
				if (start.getMonth() == currentMonth.getMonth()) {
					for (var i = start.getDate(); i <= lastOfMonth.getDate(); i++) {
						$('#calendar tbody td#day-'+i).addClass('highlight');
					};
					return;
				}

				//end this month
				if (end.getMonth() == currentMonth.getMonth()) {
					for (var i = firstOfMonth.getDate(); i <= end.getDate(); i++) {
						$('#calendar tbody td#day-'+i).addClass('highlight');
					};
					return;
				}

				if (start.getMonth() < currentMonth.getMonth() && end.getMonth() > currentMonth.getMonth()) {
					$('#calendar tbody td').addClass('highlight');
					return;
				}

			}

			$('#prev_month').click(function(){
				currentMonth.setMonth(currentMonth.getMonth()-1);
				updateCalendar(currentMonth);
				updateHighlight();
				return false;
			})

			$('#next_month').click(function(){
				currentMonth.setMonth(currentMonth.getMonth()+1);
				updateCalendar(currentMonth);
				updateHighlight();
				return false;
			})

			$('#calendar input').change(function(){
				var start = new Date(startdate.val());
				var end = new Date(enddate.val());
				$('#startdatetext').text(start.getDate()+'-'+ (start.getMonth()+1) +'-'+start.getFullYear());
				$('#enddatetext').text(end.getDate()+'-'+ (end.getMonth()+1) +'-'+end.getFullYear());
			})

			$(dinnersTable).find('th').click(function(){
				if (currentSort == $(this).data('property')) {
					reverseSort = !reverseSort;
				}
				else{
					reverseSort = false;
				}
				currentSort = $(this).data('property');
				updateDinners();
			})

			function sortDinners(dinners){
				var sorted = [];
				$.each(dinners, function(index, dinner) {
					sorted[index] = dinner;
				});

				sorted.sort(function(a, b){
					if (currentSort == 'date') {
						return new Date(a.date) - new Date(b.date);
					}
					else if (currentSort == 'price' || currentSort == 'distance') {
						return parseFloat(a[currentSort]) - parseFloat(b[currentSort])
					}
					else{
						return a[currentSort].localeCompare(b[currentSort]);
					}
				})

				if (reverseSort) {
					sorted.reverse();
				}

				return sorted;
			}
		});
	</script>
{% endblock %}